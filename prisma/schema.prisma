// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  USER
  ADMIN
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  password     String
  full_name    String
  bio          String?
  profile_image String?  // Fayl yuklanganidan keyin saqlanadigan URL
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tweets       Tweet[]
  comments     Comment[]
  likes        Like[]
  retweets     Retweet[]
  sentMessages    Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  followers    Follower[] @relation("FollowedUsers")
  following    Follower[] @relation("FollowingUsers")
  refreshTokens RefreshToken[] 
}

model RefreshToken {
  id           String   @id @default(uuid())
  token        String   @unique
  createdAt    DateTime @default(now())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tweet {
  id          String   @id @default(uuid())
  content     String
  image_url   String?  // Fayl yuklanganidan keyin saqlanadigan URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  userId      String
  comments    Comment[]
  likes       Like[]
  retweets    Retweet[]
  hashtags    TweetHashtag[]
}

model Comment {
  id          String   @id @default(uuid())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tweet       Tweet    @relation(fields: [tweetId], references: [id])
  tweetId     String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Like {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())

  tweet       Tweet    @relation(fields: [tweetId], references: [id])
  tweetId     String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Follower {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())

  follower    User     @relation("FollowingUsers", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("FollowedUsers", fields: [followingId], references: [id])
  followingId String
}

model Retweet {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())

  tweet       Tweet    @relation(fields: [tweetId], references: [id])
  tweetId     String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Message {
  id          String   @id @default(uuid())
  content     String
  createdAt   DateTime @default(now())

  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId  String
}

model Hashtag {
  id          String   @id @default(uuid())
  tag         String   @unique
  createdAt   DateTime @default(now())

  tweets      TweetHashtag[]
}

model TweetHashtag {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())

  tweet       Tweet    @relation(fields: [tweetId], references: [id])
  tweetId     String
  hashtag     Hashtag  @relation(fields: [hashtagId], references: [id])
  hashtagId   String
}
